#!/usr/bin/env ruby
require 'rubypants'
require 'htmlentities'
require 'fileutils'

class Converter
  def initialize(istream, ostream)
    @istream = istream
    @ostream = ostream
  end

  def process
    tex "documentclass", "ebook"
    read_header
    read_file
    skip_title
    tex "begin", "document"
    tex "maketitle"
    puts
    process_paragraphs
    tex "end", "document"
  end

private
  def read_file
    @paragraphs = @istream.read.split(/\n{2,}/)
  end

  def puts(*a)
    @ostream.puts(*a)
  end

  def tex(name, param=nil)
    directive = "\\" + name
    directive << "{" << tex_escape(param) << "}" if param
    puts directive
  end

  def tex_para(s)
    s = s.gsub(/_(\S.*?\S)_/, "xBEGINxITALICx\\1xENDxITALICx")
    s.gsub!(/\b--\b/, "---")
    s = tex_escape(punctuate(s))
    s.gsub!(/xBEGINxITALICx/, "\\\\textit{")
    s.gsub!(/xENDxITALICx/, "}")
    puts s
  end

  def tex_escape(s)
    return nil if s.nil?
    s.gsub(/[\\{}$&#%^_~]/, '\\\\\\0')
  end

  def punctuate(s)
    HTMLEntities.new.decode(RubyPants.new(s).to_html)
  end

  def shift
    @paragraphs.shift
  end

  def peek
    @paragraphs.first
  end

  def unwrap(s)
    s.rstrip.gsub(/ *\n */, ' ')
  end

  def read_header
    while (line = @istream.gets) !~ /\*\*\*|---/
      case line.rstrip
      when /^Title: (.*)/
        tex "title", punctuate($1)
      when /^Author: (.*)/
        tex "author", punctuate($1)
      end
    end
  end

  def skip_title
    until peek =~ /\bChapter\b|\bPart\b/ or peek.length > 80
      shift
    end
  end

  def process_paragraphs
    while paragraph = shift
      case paragraph
      when /^Chapter /
        tex "section*", paragraph
        puts
      when /^Part /
        tex "part*", paragraph
        puts
      when /^\*\*\* +END/
        return
      else
        tex_para paragraph
        puts
      end
    end
  end
end

ARGV.each do |src_file|
  Dir.chdir(File.dirname(src_file)) do
    basename = File.basename(src_file, '.txt')
    dest_file = basename + '.tex'
    File.open(src_file) do |src|
      File.open(dest_file, 'w') do |dest|
        Converter.new(src, dest).process
      end
      system "xelatex", dest_file
      Dir[basename+".{tex,aux,log,out}"].each do |f|
        FileUtils.rm(f)
      end
    end
  end
end
